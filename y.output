Grammar

    0 $accept: program $end

    1 program: L_PROGRAM L_ID L_LP identifier_list L_RP L_SC declarations subprogram_declarations compound_statement L_D

    2 identifier_list: L_ID
    3                | identifier_list L_COM L_ID

    4 declarations: %empty
    5             | declarations L_VAR identifier_list L_C type L_SC

    6 type: standard_type
    7     | L_ARRAY L_LB L_NUM L_DD L_NUM L_RB L_OF standard_type

    8 standard_type: L_INTEGER
    9              | L_REAL

   10 subprogram_declarations: %empty
   11                        | subprogram_declarations subprogram_declaration L_SC

   12 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   13 subprogram_head: L_FUNCTION L_ID arguments L_C standard_type L_SC
   14                | L_PROCEDURE L_ID arguments L_SC

   15 arguments: %empty
   16          | L_LP parameter_list L_RP

   17 parameter_list: identifier_list L_C type
   18               | parameter_list L_SC identifier_list L_C type

   19 compound_statement: L_BEGIN optional_statements L_END

   20 optional_statements: %empty
   21                    | statement_list

   22 statement_list: statement
   23               | statement_list L_SC statement

   24 statement: variable L_ASSIGNOP expression
   25          | procedure_statement
   26          | compound_statement
   27          | L_IF expression L_THEN statement L_ELSE statement
   28          | L_WHILE expression L_DO statement
   29          | L_FOR L_ID L_ASSIGNOP expression L_TO expression L_DO statement

   30 variable: L_ID
   31         | L_ID L_LB expression L_RB

   32 procedure_statement: L_ID
   33                    | L_ID L_LP expression_list L_RP

   34 expression_list: expression
   35                | expression_list L_COM expression

   36 expression: simple_expression
   37           | simple_expression L_RELOP simple_expression

   38 simple_expression: term
   39                  | L_ADD term
   40                  | L_SUB term
   41                  | simple_expression L_ADD term
   42                  | simple_expression L_SUB term
   43                  | simple_expression L_OR term

   44 term: factor
   45     | term L_MULOP factor

   46 factor: L_ID
   47       | L_ID L_LP expression_list L_RP
   48       | L_NUM
   49       | L_LP expression L_RP
   50       | L_NOT factor


Terminals, with rules where they appear

$end (0) 0
error (256)
L_PROGRAM (258) 1
L_FUNCTION (259) 13
L_PROCEDURE (260) 14
L_IF (261) 27
L_THEN (262) 27
L_ELSE (263) 27
L_WHILE (264) 28
L_FOR (265) 29
L_TO (266) 29
L_DO (267) 28 29
L_BEGIN (268) 19
L_END (269) 19
L_INTEGER (270) 8
L_REAL (271) 9
L_VAR (272) 5
L_ARRAY (273) 7
L_OF (274) 7
L_NOT (275) 50
L_ADD (276) 39 41
L_SUB (277) 40 42
L_OR (278) 43
L_MULOP (279) 45
L_RELOP (280) 37
L_ASSIGNOP (281) 24 29
L_ID (282) 1 2 3 13 14 29 30 31 32 33 46 47
L_NUM (283) 7 48
L_LP (284) 1 16 33 47 49
L_RP (285) 1 16 33 47 49
L_LB (286) 7 31
L_RB (287) 7 31
L_DD (288) 7
L_D (289) 1
L_COM (290) 3 35
L_SC (291) 1 5 11 13 14 18 23
L_C (292) 5 13 17 18


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1, on right: 0
identifier_list (40)
    on left: 2 3, on right: 1 3 5 17 18
declarations (41)
    on left: 4 5, on right: 1 5 12
type (42)
    on left: 6 7, on right: 5 17 18
standard_type (43)
    on left: 8 9, on right: 6 7 13
subprogram_declarations (44)
    on left: 10 11, on right: 1 11 12
subprogram_declaration (45)
    on left: 12, on right: 11
subprogram_head (46)
    on left: 13 14, on right: 12
arguments (47)
    on left: 15 16, on right: 13 14
parameter_list (48)
    on left: 17 18, on right: 16 18
compound_statement (49)
    on left: 19, on right: 1 12 26
optional_statements (50)
    on left: 20 21, on right: 19
statement_list (51)
    on left: 22 23, on right: 21 23
statement (52)
    on left: 24 25 26 27 28 29, on right: 22 23 27 28 29
variable (53)
    on left: 30 31, on right: 24
procedure_statement (54)
    on left: 32 33, on right: 25
expression_list (55)
    on left: 34 35, on right: 33 35 47
expression (56)
    on left: 36 37, on right: 24 27 28 29 31 34 35 49
simple_expression (57)
    on left: 38 39 40 41 42 43, on right: 36 37 41 42 43
term (58)
    on left: 44 45, on right: 38 39 40 41 42 43 45
factor (59)
    on left: 46 47 48 49 50, on right: 44 45 50


State 0

    0 $accept: . program $end

    L_PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: L_PROGRAM . L_ID L_LP identifier_list L_RP L_SC declarations subprogram_declarations compound_statement L_D

    L_ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: L_PROGRAM L_ID . L_LP identifier_list L_RP L_SC declarations subprogram_declarations compound_statement L_D

    L_LP  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: L_PROGRAM L_ID L_LP . identifier_list L_RP L_SC declarations subprogram_declarations compound_statement L_D

    L_ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    2 identifier_list: L_ID .

    $default  reduce using rule 2 (identifier_list)


State 7

    1 program: L_PROGRAM L_ID L_LP identifier_list . L_RP L_SC declarations subprogram_declarations compound_statement L_D
    3 identifier_list: identifier_list . L_COM L_ID

    L_RP   shift, and go to state 8
    L_COM  shift, and go to state 9


State 8

    1 program: L_PROGRAM L_ID L_LP identifier_list L_RP . L_SC declarations subprogram_declarations compound_statement L_D

    L_SC  shift, and go to state 10


State 9

    3 identifier_list: identifier_list L_COM . L_ID

    L_ID  shift, and go to state 11


State 10

    1 program: L_PROGRAM L_ID L_LP identifier_list L_RP L_SC . declarations subprogram_declarations compound_statement L_D

    $default  reduce using rule 4 (declarations)

    declarations  go to state 12


State 11

    3 identifier_list: identifier_list L_COM L_ID .

    $default  reduce using rule 3 (identifier_list)


State 12

    1 program: L_PROGRAM L_ID L_LP identifier_list L_RP L_SC declarations . subprogram_declarations compound_statement L_D
    5 declarations: declarations . L_VAR identifier_list L_C type L_SC

    L_VAR  shift, and go to state 13

    $default  reduce using rule 10 (subprogram_declarations)

    subprogram_declarations  go to state 14


State 13

    5 declarations: declarations L_VAR . identifier_list L_C type L_SC

    L_ID  shift, and go to state 6

    identifier_list  go to state 15


State 14

    1 program: L_PROGRAM L_ID L_LP identifier_list L_RP L_SC declarations subprogram_declarations . compound_statement L_D
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration L_SC

    L_FUNCTION   shift, and go to state 16
    L_PROCEDURE  shift, and go to state 17
    L_BEGIN      shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 21


State 15

    3 identifier_list: identifier_list . L_COM L_ID
    5 declarations: declarations L_VAR identifier_list . L_C type L_SC

    L_COM  shift, and go to state 9
    L_C    shift, and go to state 22


State 16

   13 subprogram_head: L_FUNCTION . L_ID arguments L_C standard_type L_SC

    L_ID  shift, and go to state 23


State 17

   14 subprogram_head: L_PROCEDURE . L_ID arguments L_SC

    L_ID  shift, and go to state 24


State 18

   19 compound_statement: L_BEGIN . optional_statements L_END

    L_IF     shift, and go to state 25
    L_WHILE  shift, and go to state 26
    L_FOR    shift, and go to state 27
    L_BEGIN  shift, and go to state 18
    L_ID     shift, and go to state 28

    $default  reduce using rule 20 (optional_statements)

    compound_statement   go to state 29
    optional_statements  go to state 30
    statement_list       go to state 31
    statement            go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 19

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . L_SC

    L_SC  shift, and go to state 35


State 20

   12 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 4 (declarations)

    declarations  go to state 36


State 21

    1 program: L_PROGRAM L_ID L_LP identifier_list L_RP L_SC declarations subprogram_declarations compound_statement . L_D

    L_D  shift, and go to state 37


State 22

    5 declarations: declarations L_VAR identifier_list L_C . type L_SC

    L_INTEGER  shift, and go to state 38
    L_REAL     shift, and go to state 39
    L_ARRAY    shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


State 23

   13 subprogram_head: L_FUNCTION L_ID . arguments L_C standard_type L_SC

    L_LP  shift, and go to state 43

    $default  reduce using rule 15 (arguments)

    arguments  go to state 44


State 24

   14 subprogram_head: L_PROCEDURE L_ID . arguments L_SC

    L_LP  shift, and go to state 43

    $default  reduce using rule 15 (arguments)

    arguments  go to state 45


State 25

   27 statement: L_IF . expression L_THEN statement L_ELSE statement

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 52
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 26

   28 statement: L_WHILE . expression L_DO statement

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 56
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 27

   29 statement: L_FOR . L_ID L_ASSIGNOP expression L_TO expression L_DO statement

    L_ID  shift, and go to state 57


State 28

   30 variable: L_ID .
   31         | L_ID . L_LB expression L_RB
   32 procedure_statement: L_ID .
   33                    | L_ID . L_LP expression_list L_RP

    L_LP  shift, and go to state 58
    L_LB  shift, and go to state 59

    L_ASSIGNOP  reduce using rule 30 (variable)
    $default    reduce using rule 32 (procedure_statement)


State 29

   26 statement: compound_statement .

    $default  reduce using rule 26 (statement)


State 30

   19 compound_statement: L_BEGIN optional_statements . L_END

    L_END  shift, and go to state 60


State 31

   21 optional_statements: statement_list .
   23 statement_list: statement_list . L_SC statement

    L_SC  shift, and go to state 61

    $default  reduce using rule 21 (optional_statements)


State 32

   22 statement_list: statement .

    $default  reduce using rule 22 (statement_list)


State 33

   24 statement: variable . L_ASSIGNOP expression

    L_ASSIGNOP  shift, and go to state 62


State 34

   25 statement: procedure_statement .

    $default  reduce using rule 25 (statement)


State 35

   11 subprogram_declarations: subprogram_declarations subprogram_declaration L_SC .

    $default  reduce using rule 11 (subprogram_declarations)


State 36

    5 declarations: declarations . L_VAR identifier_list L_C type L_SC
   12 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    L_VAR  shift, and go to state 13

    $default  reduce using rule 10 (subprogram_declarations)

    subprogram_declarations  go to state 63


State 37

    1 program: L_PROGRAM L_ID L_LP identifier_list L_RP L_SC declarations subprogram_declarations compound_statement L_D .

    $default  reduce using rule 1 (program)


State 38

    8 standard_type: L_INTEGER .

    $default  reduce using rule 8 (standard_type)


State 39

    9 standard_type: L_REAL .

    $default  reduce using rule 9 (standard_type)


State 40

    7 type: L_ARRAY . L_LB L_NUM L_DD L_NUM L_RB L_OF standard_type

    L_LB  shift, and go to state 64


State 41

    5 declarations: declarations L_VAR identifier_list L_C type . L_SC

    L_SC  shift, and go to state 65


State 42

    6 type: standard_type .

    $default  reduce using rule 6 (type)


State 43

   16 arguments: L_LP . parameter_list L_RP

    L_ID  shift, and go to state 6

    identifier_list  go to state 66
    parameter_list   go to state 67


State 44

   13 subprogram_head: L_FUNCTION L_ID arguments . L_C standard_type L_SC

    L_C  shift, and go to state 68


State 45

   14 subprogram_head: L_PROCEDURE L_ID arguments . L_SC

    L_SC  shift, and go to state 69


State 46

   50 factor: L_NOT . factor

    L_NOT  shift, and go to state 46
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    factor  go to state 70


State 47

   39 simple_expression: L_ADD . term

    L_NOT  shift, and go to state 46
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    term    go to state 71
    factor  go to state 55


State 48

   40 simple_expression: L_SUB . term

    L_NOT  shift, and go to state 46
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    term    go to state 72
    factor  go to state 55


State 49

   46 factor: L_ID .
   47       | L_ID . L_LP expression_list L_RP

    L_LP  shift, and go to state 73

    $default  reduce using rule 46 (factor)


State 50

   48 factor: L_NUM .

    $default  reduce using rule 48 (factor)


State 51

   49 factor: L_LP . expression L_RP

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 74
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 52

   27 statement: L_IF expression . L_THEN statement L_ELSE statement

    L_THEN  shift, and go to state 75


State 53

   36 expression: simple_expression .
   37           | simple_expression . L_RELOP simple_expression
   41 simple_expression: simple_expression . L_ADD term
   42                  | simple_expression . L_SUB term
   43                  | simple_expression . L_OR term

    L_ADD    shift, and go to state 76
    L_SUB    shift, and go to state 77
    L_OR     shift, and go to state 78
    L_RELOP  shift, and go to state 79

    $default  reduce using rule 36 (expression)


State 54

   38 simple_expression: term .
   45 term: term . L_MULOP factor

    L_MULOP  shift, and go to state 80

    $default  reduce using rule 38 (simple_expression)


State 55

   44 term: factor .

    $default  reduce using rule 44 (term)


State 56

   28 statement: L_WHILE expression . L_DO statement

    L_DO  shift, and go to state 81


State 57

   29 statement: L_FOR L_ID . L_ASSIGNOP expression L_TO expression L_DO statement

    L_ASSIGNOP  shift, and go to state 82


State 58

   33 procedure_statement: L_ID L_LP . expression_list L_RP

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression_list    go to state 83
    expression         go to state 84
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 59

   31 variable: L_ID L_LB . expression L_RB

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 85
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 60

   19 compound_statement: L_BEGIN optional_statements L_END .

    $default  reduce using rule 19 (compound_statement)


State 61

   23 statement_list: statement_list L_SC . statement

    L_IF     shift, and go to state 25
    L_WHILE  shift, and go to state 26
    L_FOR    shift, and go to state 27
    L_BEGIN  shift, and go to state 18
    L_ID     shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 86
    variable             go to state 33
    procedure_statement  go to state 34


State 62

   24 statement: variable L_ASSIGNOP . expression

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 87
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 63

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration L_SC
   12 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    L_FUNCTION   shift, and go to state 16
    L_PROCEDURE  shift, and go to state 17
    L_BEGIN      shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 88


State 64

    7 type: L_ARRAY L_LB . L_NUM L_DD L_NUM L_RB L_OF standard_type

    L_NUM  shift, and go to state 89


State 65

    5 declarations: declarations L_VAR identifier_list L_C type L_SC .

    $default  reduce using rule 5 (declarations)


State 66

    3 identifier_list: identifier_list . L_COM L_ID
   17 parameter_list: identifier_list . L_C type

    L_COM  shift, and go to state 9
    L_C    shift, and go to state 90


State 67

   16 arguments: L_LP parameter_list . L_RP
   18 parameter_list: parameter_list . L_SC identifier_list L_C type

    L_RP  shift, and go to state 91
    L_SC  shift, and go to state 92


State 68

   13 subprogram_head: L_FUNCTION L_ID arguments L_C . standard_type L_SC

    L_INTEGER  shift, and go to state 38
    L_REAL     shift, and go to state 39

    standard_type  go to state 93


State 69

   14 subprogram_head: L_PROCEDURE L_ID arguments L_SC .

    $default  reduce using rule 14 (subprogram_head)


State 70

   50 factor: L_NOT factor .

    $default  reduce using rule 50 (factor)


State 71

   39 simple_expression: L_ADD term .
   45 term: term . L_MULOP factor

    L_MULOP  shift, and go to state 80

    $default  reduce using rule 39 (simple_expression)


State 72

   40 simple_expression: L_SUB term .
   45 term: term . L_MULOP factor

    L_MULOP  shift, and go to state 80

    $default  reduce using rule 40 (simple_expression)


State 73

   47 factor: L_ID L_LP . expression_list L_RP

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression_list    go to state 94
    expression         go to state 84
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 74

   49 factor: L_LP expression . L_RP

    L_RP  shift, and go to state 95


State 75

   27 statement: L_IF expression L_THEN . statement L_ELSE statement

    L_IF     shift, and go to state 25
    L_WHILE  shift, and go to state 26
    L_FOR    shift, and go to state 27
    L_BEGIN  shift, and go to state 18
    L_ID     shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 96
    variable             go to state 33
    procedure_statement  go to state 34


State 76

   41 simple_expression: simple_expression L_ADD . term

    L_NOT  shift, and go to state 46
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    term    go to state 97
    factor  go to state 55


State 77

   42 simple_expression: simple_expression L_SUB . term

    L_NOT  shift, and go to state 46
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    term    go to state 98
    factor  go to state 55


State 78

   43 simple_expression: simple_expression L_OR . term

    L_NOT  shift, and go to state 46
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    term    go to state 99
    factor  go to state 55


State 79

   37 expression: simple_expression L_RELOP . simple_expression

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    simple_expression  go to state 100
    term               go to state 54
    factor             go to state 55


State 80

   45 term: term L_MULOP . factor

    L_NOT  shift, and go to state 46
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    factor  go to state 101


State 81

   28 statement: L_WHILE expression L_DO . statement

    L_IF     shift, and go to state 25
    L_WHILE  shift, and go to state 26
    L_FOR    shift, and go to state 27
    L_BEGIN  shift, and go to state 18
    L_ID     shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 102
    variable             go to state 33
    procedure_statement  go to state 34


State 82

   29 statement: L_FOR L_ID L_ASSIGNOP . expression L_TO expression L_DO statement

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 103
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 83

   33 procedure_statement: L_ID L_LP expression_list . L_RP
   35 expression_list: expression_list . L_COM expression

    L_RP   shift, and go to state 104
    L_COM  shift, and go to state 105


State 84

   34 expression_list: expression .

    $default  reduce using rule 34 (expression_list)


State 85

   31 variable: L_ID L_LB expression . L_RB

    L_RB  shift, and go to state 106


State 86

   23 statement_list: statement_list L_SC statement .

    $default  reduce using rule 23 (statement_list)


State 87

   24 statement: variable L_ASSIGNOP expression .

    $default  reduce using rule 24 (statement)


State 88

   12 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 12 (subprogram_declaration)


State 89

    7 type: L_ARRAY L_LB L_NUM . L_DD L_NUM L_RB L_OF standard_type

    L_DD  shift, and go to state 107


State 90

   17 parameter_list: identifier_list L_C . type

    L_INTEGER  shift, and go to state 38
    L_REAL     shift, and go to state 39
    L_ARRAY    shift, and go to state 40

    type           go to state 108
    standard_type  go to state 42


State 91

   16 arguments: L_LP parameter_list L_RP .

    $default  reduce using rule 16 (arguments)


State 92

   18 parameter_list: parameter_list L_SC . identifier_list L_C type

    L_ID  shift, and go to state 6

    identifier_list  go to state 109


State 93

   13 subprogram_head: L_FUNCTION L_ID arguments L_C standard_type . L_SC

    L_SC  shift, and go to state 110


State 94

   35 expression_list: expression_list . L_COM expression
   47 factor: L_ID L_LP expression_list . L_RP

    L_RP   shift, and go to state 111
    L_COM  shift, and go to state 105


State 95

   49 factor: L_LP expression L_RP .

    $default  reduce using rule 49 (factor)


State 96

   27 statement: L_IF expression L_THEN statement . L_ELSE statement

    L_ELSE  shift, and go to state 112


State 97

   41 simple_expression: simple_expression L_ADD term .
   45 term: term . L_MULOP factor

    L_MULOP  shift, and go to state 80

    $default  reduce using rule 41 (simple_expression)


State 98

   42 simple_expression: simple_expression L_SUB term .
   45 term: term . L_MULOP factor

    L_MULOP  shift, and go to state 80

    $default  reduce using rule 42 (simple_expression)


State 99

   43 simple_expression: simple_expression L_OR term .
   45 term: term . L_MULOP factor

    L_MULOP  shift, and go to state 80

    $default  reduce using rule 43 (simple_expression)


State 100

   37 expression: simple_expression L_RELOP simple_expression .
   41 simple_expression: simple_expression . L_ADD term
   42                  | simple_expression . L_SUB term
   43                  | simple_expression . L_OR term

    L_ADD  shift, and go to state 76
    L_SUB  shift, and go to state 77
    L_OR   shift, and go to state 78

    $default  reduce using rule 37 (expression)


State 101

   45 term: term L_MULOP factor .

    $default  reduce using rule 45 (term)


State 102

   28 statement: L_WHILE expression L_DO statement .

    $default  reduce using rule 28 (statement)


State 103

   29 statement: L_FOR L_ID L_ASSIGNOP expression . L_TO expression L_DO statement

    L_TO  shift, and go to state 113


State 104

   33 procedure_statement: L_ID L_LP expression_list L_RP .

    $default  reduce using rule 33 (procedure_statement)


State 105

   35 expression_list: expression_list L_COM . expression

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 114
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 106

   31 variable: L_ID L_LB expression L_RB .

    $default  reduce using rule 31 (variable)


State 107

    7 type: L_ARRAY L_LB L_NUM L_DD . L_NUM L_RB L_OF standard_type

    L_NUM  shift, and go to state 115


State 108

   17 parameter_list: identifier_list L_C type .

    $default  reduce using rule 17 (parameter_list)


State 109

    3 identifier_list: identifier_list . L_COM L_ID
   18 parameter_list: parameter_list L_SC identifier_list . L_C type

    L_COM  shift, and go to state 9
    L_C    shift, and go to state 116


State 110

   13 subprogram_head: L_FUNCTION L_ID arguments L_C standard_type L_SC .

    $default  reduce using rule 13 (subprogram_head)


State 111

   47 factor: L_ID L_LP expression_list L_RP .

    $default  reduce using rule 47 (factor)


State 112

   27 statement: L_IF expression L_THEN statement L_ELSE . statement

    L_IF     shift, and go to state 25
    L_WHILE  shift, and go to state 26
    L_FOR    shift, and go to state 27
    L_BEGIN  shift, and go to state 18
    L_ID     shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 117
    variable             go to state 33
    procedure_statement  go to state 34


State 113

   29 statement: L_FOR L_ID L_ASSIGNOP expression L_TO . expression L_DO statement

    L_NOT  shift, and go to state 46
    L_ADD  shift, and go to state 47
    L_SUB  shift, and go to state 48
    L_ID   shift, and go to state 49
    L_NUM  shift, and go to state 50
    L_LP   shift, and go to state 51

    expression         go to state 118
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 114

   35 expression_list: expression_list L_COM expression .

    $default  reduce using rule 35 (expression_list)


State 115

    7 type: L_ARRAY L_LB L_NUM L_DD L_NUM . L_RB L_OF standard_type

    L_RB  shift, and go to state 119


State 116

   18 parameter_list: parameter_list L_SC identifier_list L_C . type

    L_INTEGER  shift, and go to state 38
    L_REAL     shift, and go to state 39
    L_ARRAY    shift, and go to state 40

    type           go to state 120
    standard_type  go to state 42


State 117

   27 statement: L_IF expression L_THEN statement L_ELSE statement .

    $default  reduce using rule 27 (statement)


State 118

   29 statement: L_FOR L_ID L_ASSIGNOP expression L_TO expression . L_DO statement

    L_DO  shift, and go to state 121


State 119

    7 type: L_ARRAY L_LB L_NUM L_DD L_NUM L_RB . L_OF standard_type

    L_OF  shift, and go to state 122


State 120

   18 parameter_list: parameter_list L_SC identifier_list L_C type .

    $default  reduce using rule 18 (parameter_list)


State 121

   29 statement: L_FOR L_ID L_ASSIGNOP expression L_TO expression L_DO . statement

    L_IF     shift, and go to state 25
    L_WHILE  shift, and go to state 26
    L_FOR    shift, and go to state 27
    L_BEGIN  shift, and go to state 18
    L_ID     shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 123
    variable             go to state 33
    procedure_statement  go to state 34


State 122

    7 type: L_ARRAY L_LB L_NUM L_DD L_NUM L_RB L_OF . standard_type

    L_INTEGER  shift, and go to state 38
    L_REAL     shift, and go to state 39

    standard_type  go to state 124


State 123

   29 statement: L_FOR L_ID L_ASSIGNOP expression L_TO expression L_DO statement .

    $default  reduce using rule 29 (statement)


State 124

    7 type: L_ARRAY L_LB L_NUM L_DD L_NUM L_RB L_OF standard_type .

    $default  reduce using rule 7 (type)
